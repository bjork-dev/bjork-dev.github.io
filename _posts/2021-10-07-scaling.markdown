---
typora-copy-images-to: ..\img
---

## Scaling out and up

There's two types of scaling strategies that can be used in cloud computing. Scaling up/down and out/in.

#### Scale Out

When we choose to scale out we are creating new instances of the application running. For example our Azure App Service could scale out to multiple instances (containers) running the same app to serve more requests and balance the load. This is ideal when we temporarily need more performance to handle an increased request load or if we want to start up instances in other regions to decrease response times. This can also be a very cost-efficient strategy if used in a microservices architecture where the systems are decoupled from each other, for example Azure Functions for API, Web App for presentation and cosmos DB for database. We can then scale these systems independently depending on the load, and scale in when the load decreases. We could even turn on auto-scaling based on fixed metrics to handle this automatically, this will make sure that we only pay for consumption and nothing more.



#### Scale Up

Scaling up essentially means that we add more (better) hardware to our app, for instance more RAM or vCPUs. This can be ideal when you have a steady, predictable load and don't expect any huge peaks. This approach *can* also be more cost-efficient since you will know exactly what you are paying for, in contrast to multiple servers spinning up and down depending on load peaks. Scaling up does require downtime, since the environment has to be moved to new hardware. Other reasons why scaling up could be ideal is if other systems can't handle multiple instances making requests (like a single instance API endpoint) or if the app is not stateless, since scaling out will start and terminate instances we cannot save any data to the instance, otherwise it will get lost at termination.



## Cost - Scale out vs Scale up 

When scaling up we can control our costs since we will upgrade one instance to a new hardware plan. Usually the cost estimation per month or hour is provided by the cloud provider while selecting plans. When instead scaling out, we pay for additional instances, but only during the time that they are needed. Once the load has normalized they are terminated and we only pay for the running instance(s). Which one that will be more cost-efficient depends on the scenario and the system type.

For virtual machines, scaling up is the easier approach since it will only require a hardware upgrade. Scaling out is of course an option as well but it will increase complexity with each instance and require configuring of load balancers for each new instance and make sure that running applications in the environment is configured for it as well.

For app services scaling up is more suitable when we have stateful applications (data is saved/processed by the app), this just like VMs requires downtime for the upgrade. If the app service is stateless, scaling out will provide the most benefits, and load balancing, etc. is taken care by container orchestrating.



## App Service Plans

Depending on what App Service Plan we run, there's different possibilities for scaling. 

##### Dev / Test

F1 does not grant any scaling, but B1 does give us access to 3 instances of manual scale.

<img src="/img/appservice1.png">

##### Production and greater

For the production and isolated plans we have access to far more instances, starting at 20 for the lowest tier (or 10 for S Tier) and also auto-scaling, which can be configured to scale on demand.

<img src="/img/image-20211008102016671.png">

##### Sources

[Scale Up vs Scale Out](https://opsani.com/blog/scale-up-vs-scale-out-whats-the-difference/)

[Scale apps in Azure App Service](https://docs.microsoft.com/en-us/learn/modules/scale-apps-app-service/)

[Scale an App Service web app to efficiently meet demand with App Service scale up and scale out](https://docs.microsoft.com/en-us/learn/modules/app-service-scale-up-scale-out/)

[Scale up vs Scale out](https://www.stevemar.net/scale-up-scale-out/)
